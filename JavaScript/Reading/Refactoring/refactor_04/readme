重构的目的在于运用大量微小且保持软件行为的步骤，一步步达成大规模的修改。

重构：对软件内部结构的一种调整，目的是在 不改变软件可观察行为 的前提下，提高其可理解性，降低修改成本

重构思想：通过大量微小的行为步骤，完成最终的重构。小步骤彼此之间能够很好的组合

可观察行为：经过重构之后的代码所做的事与重构之前大致一致，用户行为完全一直

重构行为：1. 添加新功能 2. 重构
  添加新功能时不修改既有代码，重构是不添加新功能

重构目的：1. 改进软件设计：消除重复但功能相同的代码 2. 使软件更容易理解（理解程序的对象有两个：运行的计算机和阅读代码的人）3. 帮助寻找bug 4. 提高开发效率

何时重构：预备性重构（添加新功能之前，帮助理解代码，优化既有逻辑）；code review 

何时不应该重构：代码糟糕但是被封装起来，如果不需要去理解是不必要重构的；重写可能比重构更简单

测试：每一个项目都应该准备对应的测试代码，在每次重构之后进行一次测试，既可以减少bug的引入，又可以当出现bug的时候快速定位

框架的重构：好的架构设计是保证整个架构的灵活性。结合使用重构和YAGNI两种设计模式，重构是YAGNI的基础，而YAGNI又可以让重构更加易于展开。

注：
  + 在开发阶段要考虑到实现一段简洁清晰的代码的成本
  + 重构与添加新功能切换不同的分支进行
  + YAGNI（you aren‘t going to need it）：
    只针对当前的需求实现高质量的软件设计，不过度预设不完备的功能。（补充完整）
  + 关于简单设计和架构思考：
    简单设计和架构思考是两种软件设计中不同的思维方式。编写一个函数时为了考虑通用或者复用性，会为函数添加参数。在某些场景之下会添加多个参数，这些参数是一种灵活机制。但是多个参数，会使函数本身变得复杂难以维护。在新增功能或维护这个函数的时候都具备很大的难度。另外，未来需求的变更往往并非如我们所设计的那样。因此有时候灵活机制反而变得不灵活。在很多场景下我们只需要根据当前的需求完成高质量的设计，随着对用户需求的加深，对原有设计进行重构即可。如果一个参数不能做到不同调用者传入不同的参数值，那么这个参数就不应该被添加。在设计一个软件时，如果考虑到之后的重构是困难的，那么可以添加必要的参数，提高软件的灵活性
