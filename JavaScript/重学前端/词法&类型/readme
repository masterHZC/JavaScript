JavaScript

Lexical Grammar
    
1. SourceCharater   Unicode
    Unicode是一个字符集，通过码点将每一个字符映射到一个正整数上。ASCII字符集是一种比较早期的字符集，一共是128个，基本上所有字符集都会兼容ASCII，同样Unicode字符集也兼容了ASCII。其中U+0000-U+007F（128）就是ASCII字符集 

    U+000A LF
    U+0020 SPACE
    CJK Unified Ideographs 中日韩的字符范围 （U+4E00 - U+9FFF）

    Unicode标号规范
     2^16一个号码组成一个plain
     目前一共17个平面，空间大小是 2^21
     1个基本平面 BMP：U+0000～U+FFFF
     16个辅助平面 SMP：U+010000～U+10FFFF

    BMP 是指不超出4位字符表示的Unicode 分割线是 U+FFFF前后，在U+FFFF之前（包括U+FFFF）的Unicode都是可以用4位字符表示的，而超出了 Specails（U+FFF0 - U+FFFF） 就是SMP

    最后说JavaScript使用的编码类型是什么？

    JavaScript使用的编码类型是UCS-2。在JavaScript诞生的时候采用了UCS-2这种编码方式，UCS-2是一种支持16位的编码。之后UTF-16替代了UCS-2，将UCS-2归到了UTF-16之中。所以JavaScript使用的编码方式是UTF-16但并不是全部支持。所以造成JavaScript的所有字符都是2个字节的，如果是4字节的字符就会被当作两个双字节的字符。
    因为UTF-16是由D800-DFFF这个范围的字节重新匹配的，所以造成了一下的问题
        1. 一个超过两个字节的字符 无法正确的匹配自己的UTF-16编码
        2. 不能通过 charAt(0) 匹配出第一个字符 （因为基本平面的映射的码点都没有具体含义都是空字符串）
        3. 通过 charCodeAt(0) 匹配的码点是 映射的码点
        4. 想获得全等的匹配 只能是 字符 匹配 两个映射码点

    JavaScript 中的字符串方法  String.fromCharCode() 只能处理4位字符的Unicode 

    但是字符串 最新的 String.fromCodePoint() 和 String.prototype.codePointAt() 可以解析 4位以上的 Unicode

    由于不同的文本存在不同的编译问题，所以尽可能不使用超过ASCII码作为变量的名称 如果要尝试 可是使用 \u 转义的方式来表达 其他编码 
    ```
        '厉害'.codePointAt(0).toString(16)  \\ 5389  
        '厉害'.codePointAt(1).toString(16)  \\ 5bb3
        var \u5389\u5bb3 = 1
        console.log(厉害) // 1
    ```

    \u 转义支持两种场景 1. 作为变量名 2. 作为字符串 '\u0061' => 'a' 


    相关网站
    FileFormat.info(https://www.fileformat.info/info/unicode/)

---------------------------------------------------------------------------------------

2. InputElement
    WhiteSpace         空白符
    LineTerminator     换行符
    Comment            注释
    Token
        
    在JavaScript中 一切有效的部分都属于Token ，无效的部分包括 WhiteSpace LineTerminator Comment

    WhiteSpace ::
        <TAB>     Tab               '\t'     制表符        9
        <VT>                        '\v'     纵向制表符    11
        <FF>      From Feed                              10
        <SP>      Space              '\s'                32      
        <NBSP>    No-Break-Space     &nbsp;
        ```
            space的特性是'分词' 在实际的使用中 html解析文本如果超出一行换行的时候，会以空格为分界进行换行
            而 &nbsp; 那么不会在换行是作为分界线分开
        ```
        <ZWNBSP>  \uFEFF BOM 一种编码格式
        <USP>     Unicode 中的空格

    LineTerminator::
        <LF>      \n | \r\n
        <CR>
        <LS>
        <PS>

    Token::   
        形成结构
            Punctuator    符号      () = < > /
            Keywords      关键字     for
        有效信息
            Identifier    标识符    i   document  write
                变量名     不能包含关键字 
                属性       可以包含关键字
            Literal       直接量     '' 0 true false null 

            Punctuator
            IdentifierName
                Identifier
                Keywords
                Future reserved Keywords:  enum
            Literal

    PS：undefined 是一个全局的变量名 不属于关键字 全局下不可以更改 但是在局部作用域中是可以更改的 最多算个identifier

    IdentifierStart :: 
        UnicodeIDStart     Unicode "ID_Start" unicode中规范的可以开头的字符 在ASCII的范围内都是字母
        $ _ 这两种字符是javaScript语言本身规定的 跟Unicode没关系
        \ UnicodeEscapeSequence

    IdentifierPart :: 
        UnicodeIDContinue   Unicode "ID_Continue"
        $
        \ UnicodeEscapeSequence 
        <ZWNJ>  <ZWJ>  两个0宽标识符


    Literal::
        Number::
            IEEE754 doubel float
            Sign     （1）   正负
            Exponent （11）  科学计数法
            Fraction （52）  精度部分

        String
        Boolean
        Null
        Undefined
        Symbel
        Object

---------------------------------------------------------------------------------------

3. unicode
    1. ASCII 是最早期用来储存英文字母的字符集，每一个二进制的由0和1两种状态构成，八个二进制表示一个字节，可以有256中不同的状态。ASCII码规定，一个字节的第一位默认由0表示，其余后7位由正常的二进制表示。一次ASCII码一共由128个字符组成。
    2. Unicode 是世界上最大的字符集，Unicode诞生的目的就是创建一个可以囊括世界上所有字符的字符集，保证编码的统一防止乱码的情况。所有的字符都可以通过码点将每一个字符匹配一个正整数。但是问题是Unicode只规定了符号是二进制的代码，但是并没有规定二进制代码的储存方式。一个汉字对应的16进制的Unicode，转换成二进制数可能需要3-5个字节表示。如果所有的unicode 都按照最大的字符的字节数来表示那么除了有效的二进制的位数之外，其余所有的位置都需要填0，这样极大的浪费了储存空间。因此，Unicode出现了多种储存方式
    3. UTF-8 就是unicode一种实现方式。
       1. UTF-8最大的特点是一个可编程的编码方式，可以使用1-4个字节表示一个字符，根据不同的符号而改变字节的长度
       2. UTF-8的表示规则
        （1）单个字节的符号，字节的第一位设为0，后面7位为这个符号的Unicode码。此时的表达当时与ASCII相同
        （2）对于n字节的符号（n > 1），第一个字节的前n为都设为1，第n+1设为0，后面字节的前两位一律设为10，剩下的没有提及的二进制位，全部位这个符号的Unicode码
    ```
     1. 如果是一个字节 那么就是ASCII的表达方式
     2. 如果是多个字节，可以从第一个字节的1的个数判断当前的字符占用了几个字节
    ```
        注：16进制的unicode 与通过 UTF-8编码后的16进制是不同
    4. FE FF 对于多字节的Unicode有两种表达方式，一种是大数在前（FEFF），另一种是小数在前（FFFE）

    5. UTF16 是Unicode的另外一种实现方式，结合了UTF-8以及UTF-32的编码特征，即存在特定的长度，又可以结合同步的场景增加字节长度。
      UTF-16个规则非常简单，基本平面的字符占用两个字节，辅助平面的字符占用四个字节

      问题是如何确定，前面两个字节是一个单独和字符还是和后面的两个字节合成一个字符
      在基本平面内，从D800-DFFF是一个空段，不匹配任何字符。因此通过这个空段来匹配赋值平面的字符。
      而辅助平面的字符共有2^10个，也就是说需要一个20位的2进制的空间。因此又将D800-DFFF这段分成两个部分，那么匹配到这两部分的字节就需要与后面的字节一起组合才能匹配成一个字符

---------------------------------------------------------------------------------------